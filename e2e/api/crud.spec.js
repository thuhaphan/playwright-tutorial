const { test, expect, request } = require('@playwright/test');

test.describe('üß™ JSONPlaceholder API - Full CRUD Test', () => {
  let apiContext;

  test.beforeAll(async () => {
    apiContext = await request.newContext({
      baseURL: 'https://jsonplaceholder.typicode.com',
      extraHTTPHeaders: {
        'Content-Type': 'application/json',
      },
    });
  });

  test('GET - L·∫•y th√¥ng tin user', async () => {
    const response = await apiContext.get('/users/1');
    expect(response.status()).toBe(200);

    const data = await response.json();
    expect(data).toHaveProperty('id', 1);
    expect(data).toHaveProperty('username');
  });

  test('POST - T·∫°o post m·ªõi', async () => {
    const response = await apiContext.post('/posts', {
      data: {
        title: 'Playwright Test',
        body: 'ƒê√¢y l√† n·ªôi dung b√†i post ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.',
        userId: 1,
      },
    });

    expect(response.status()).toBe(201); // 201 Created
    const data = await response.json();
    expect(data).toHaveProperty('id'); // JSONPlaceholder gi·∫£ l·∫≠p, s·∫Ω tr·∫£ v·ªÅ id m·ªõi
    expect(data.title).toBe('Playwright Test');
  });

  test('PUT - C·∫≠p nh·∫≠t post', async () => {
    const response = await apiContext.put('/posts/1', {
      data: {
        id: 1,
        title: 'B√†i vi·∫øt ƒë√£ ch·ªânh s·ª≠a',
        body: 'N·ªôi dung m·ªõi sau khi ch·ªânh s·ª≠a.',
        userId: 1,
      },
    });

    expect(response.status()).toBe(200);
    const data = await response.json();
    expect(data.title).toContain('ch·ªânh s·ª≠a');
  });

  test('DELETE - X√≥a post', async () => {
    const response = await apiContext.delete('/posts/1');
    expect(response.status()).toBe(200); // JSONPlaceholder lu√¥n tr·∫£ v·ªÅ 200 nh∆∞ng kh√¥ng xo√° th·∫≠t
  });
});
